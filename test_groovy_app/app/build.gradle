/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {    
    // 1. Import the Groovy Bill of Materials to control all groovy module versions
    implementation platform(libs.groovy.bom)

    // 2. Use the core Groovy 4 dependency (replaces the old libs.groovy.all)
    implementation libs.groovy.core

    // The module containing the GUI console tool
    implementation 'org.apache.groovy:groovy-console'

    groovy.console.ui
    
    
    // This dependency is used by the application.
    implementation libs.guava

    // Use the Spock testing framework compatible with Groovy 4.
    // It automatically brings in the JUnit 5 test engine it needs.
    testImplementation libs.spock.core
    // testImplementation libs.junit

    //testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // ADD THIS LINE to get the JSON library
    // implementation 'org.json:json:20240303'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// NOTE Allows interactive testing classes and libraries - not working with groovy 4 yet
// launches a GUI console with the entire project environment loaded
// task runConsole(type: JavaExec) {
//     group = "Application"
//     description = "Runs the Groovy Console with project classes and dependencies"
//     mainClass = 'groovy.ui.Console'
//     //mainClass = 'groovy.ui.ConsoleApplet'
//     classpath = sourceSets.main.runtimeClasspath

//     // ADD THIS BLOCK - The GUI console needs the same permissions as the shell
//     // to run correctly on modern Java (9+).
//     jvmArgs = [
//         '--add-opens=java.base/java.lang=ALL-UNNAMED',
//         '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
//         '--add-opens=java.base/java.io=ALL-UNNAMED',
//         '--add-opens=java.base/java.nio=ALL-UNNAMED',
//         '--add-opens=java.base/java.nio.channels=ALL-UNNAMED',
//         '--add-opens=java.base/java.util=ALL-UNNAMED',
//         '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
//         '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
//     ]
// }

// NOTE not working - tried but not yet ...
// // NOTE Allows running directly in the terminal (instead of popup window)
// // Task for a terminal-based shell (groovysh)
// // Needs to be quite permissive to be able to run (so maybe not the best practice)
// task runShell(type: JavaExec) {
//     group = "Application"
//     description = "Runs groovysh with project classes and dependencies"
//     mainClass = 'org.codehaus.groovy.tools.shell.Main'
//     classpath = sourceSets.main.runtimeClasspath
//     standardInput = System.in

//     // This is the full, official list of permissions needed for Groovy's
//     // command-line tools to run correctly on modern Java (9+).
//     jvmArgs = [
//         '--add-opens=java.base/java.lang=ALL-UNNAMED',
//         '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
//         '--add-opens=java.base/java.io=ALL-UNNAMED',
//         '--add-opens=java.base/java.nio=ALL-UNNAMED',
//         '--add-opens=java.base/java.nio.channels=ALL-UNNAMED',
//         '--add-opens=java.base/java.util=ALL-UNNAMED',
//         '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
//         '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
//     ]
// }

// A simple and stable task to run the Scratch.groovy file
// Need to have at least one type of scratch file: src/main/groovy/Scratch.groovy
// task runScratch(type: JavaExec) {
//     group = "Application"
//     description = "Runs the Scratch.groovy file for interactive testing"
//     mainClass = 'Scratch' // The name of our scratchpad file
//     classpath = sourceSets.main.runtimeClasspath
// }

// A special diagnostic task to inspect the classpath
import java.util.zip.ZipFile

task checkConsoleClass {
    doLast {
        println "--- Checking runtime classpath for groovy.ui.Console ---"
        boolean found = false
        // This is the exact same classpath used by runConsole
        project.sourceSets.main.runtimeClasspath.each { file ->
            if (file.name.endsWith('.jar') && file.name.contains('groovy')) {
                println "Checking: ${file.name}"
                try {
                    ZipFile zipFile = new ZipFile(file)
                    // Check if the specific class file exists in this JAR
                    if (zipFile.getEntry('groovy/ui/Console.class') != null) {
                        println ""
                        println ">>> SUCCESS: Found groovy.ui.Console in ${file.name} <<<"
                        println ""
                        found = true
                    }
                    zipFile.close()
                } catch (Exception e) {
                    println "Could not read ${file.name}: ${e.message}"
                }
            }
        }
        if (!found) {
            println ""
            println "---"
            println ">>> FAILURE: The class groovy.ui.Console was NOT found in any Groovy JAR on the classpath."
            println "---"
        }
    }

}